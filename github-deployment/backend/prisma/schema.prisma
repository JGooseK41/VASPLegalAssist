// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String
  firstName       String
  lastName        String
  agencyName      String
  badgeNumber     String
  title           String?
  phone           String?
  role            String    @default("USER")
  isApproved      Boolean   @default(false)
  leaderboardOptOut Boolean @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  templates       DocumentTemplate[]
  documents       Document[]
  comments        VaspComment[]
  votes           CommentVote[]
  vaspSubmissions VaspSubmission[]
  passwordResets  PasswordResetToken[]
  vaspResponses   VaspResponse[]
}

model DocumentTemplate {
  id              String    @id @default(uuid())
  userId          String
  templateType    String
  templateName    String
  agencyHeader    String
  agencyAddress   String
  agencyContact   String
  footerText      String
  signatureBlock  String
  customFields    String?
  isDefault       Boolean   @default(false)
  
  // Smart template support
  fileUrl         String?   // URL to uploaded template file
  fileType        String?   // docx, pdf, html
  fileSize        Int?      // Size in bytes
  originalFilename String?  // Original filename
  templateContent String?   // Extracted template content
  markers         String?   // JSON array of detected markers
  markerMappings  String?   // JSON mapping of markers to fields
  
  // Encryption support
  isEncrypted     Boolean   @default(false)
  encryptedContent String?  // Encrypted version of templateContent
  encryptedMarkers String?  // Encrypted version of markers
  encryptedMappings String? // Encrypted version of markerMappings
  encryptedCustomFields String? // Encrypted version of customFields
  
  // Client-side encryption support
  isClientEncrypted Boolean  @default(false)
  encryptionVersion String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id])
}

model Document {
  id                  String    @id @default(uuid())
  userId              String
  vaspId              Int
  vaspName            String
  vaspJurisdiction    String
  vaspEmail           String
  documentType        String
  caseNumber          String
  crimeDescription    String
  statute             String
  transactionDetails  String
  requestedData       String
  pdfUrl              String?
  createdAt           DateTime  @default(now())
  
  // Encryption support
  isEncrypted         Boolean   @default(false)
  encryptedTransactionDetails String? // Encrypted version of transactionDetails
  encryptedRequestedData String?      // Encrypted version of requestedData
  encryptedContent    String?         // Encrypted version of document content
  
  // Client-side encryption support
  isClientEncrypted   Boolean   @default(false)
  encryptionVersion   String?
  outputFormat        String?   @default("pdf")
  filePath            String?
  metadata            String?   // Additional encrypted metadata
  
  user                User      @relation(fields: [userId], references: [id])
  transactionImports  TransactionImport[]
  vaspResponses       VaspResponse[]
}

model TransactionImport {
  id              String    @id @default(uuid())
  documentId      String
  csvData         String
  processed       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  
  document        Document  @relation(fields: [documentId], references: [id])
}

model VaspComment {
  id              String    @id @default(uuid())
  userId          String
  vaspId          Int
  content         String
  isUpdate        Boolean   @default(false) // Indicates if this is an update notification
  voteScore       Int       @default(0)     // Cached score for efficient sorting
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id])
  vasp            Vasp      @relation(fields: [vaspId], references: [id])
  votes           CommentVote[]
  
  @@index([vaspId, voteScore]) // Index for efficient querying by VASP and sorting by score
}

model CommentVote {
  id              String    @id @default(uuid())
  userId          String
  commentId       String
  value           Int       // 1 for upvote, -1 for downvote
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id])
  comment         VaspComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, commentId]) // Each user can only vote once per comment
}

model Vasp {
  id                  Int       @id @default(autoincrement())
  name                String
  legal_name          String
  jurisdiction        String
  compliance_email    String
  compliance_contact  String?
  service_address     String?
  phone               String?
  processing_time     String    @default("5-10 business days")
  preferred_method    String
  required_document   String?
  info_types          String[]
  accepts_us_service  Boolean   @default(false)
  has_own_portal      Boolean   @default(false)
  law_enforcement_url String?
  notes               String?
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  comments            VaspComment[]
  responses           VaspResponse[]
}

model VaspSubmission {
  id                  String    @id @default(uuid())
  userId              String
  status              String    @default("PENDING") // PENDING, APPROVED, REJECTED
  rejectionReason     String?
  
  // VASP data fields
  name                String
  legal_name          String
  jurisdiction        String
  compliance_email    String
  compliance_contact  String?
  service_address     String?
  phone               String?
  processing_time     String
  preferred_method    String
  required_document   String?
  info_types          String[]
  accepts_us_service  Boolean   @default(false)
  has_own_portal      Boolean   @default(false)
  law_enforcement_url String?
  notes               String?
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  reviewedAt          DateTime?
  reviewedBy          String?
  
  user                User      @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id              String    @id @default(uuid())
  userId          String
  token           String    @unique
  expiresAt       DateTime
  used            Boolean   @default(false)
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id])
  
  @@index([token, expiresAt])
}

model VaspResponse {
  id                    String    @id @default(uuid())
  userId                String
  vaspId                Int
  documentId            String
  documentType          String
  isUsCompliant         Boolean
  recordsRequestMethod  String?   // 'letterhead', 'subpoena', 'search_warrant', 'mlat'
  freezeRequestMethod   String?   // 'letterhead', 'search_warrant', 'mlat'
  turnaroundTime        String    // 'less_than_24h', '2_3_days', '1_week_or_less', '1_4_weeks', 'more_than_4_weeks'
  additionalNotes       String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  user                  User      @relation(fields: [userId], references: [id])
  vasp                  Vasp      @relation(fields: [vaspId], references: [id])
  document              Document  @relation(fields: [documentId], references: [id])
  
  @@index([vaspId])
  @@index([userId])
  @@index([documentId])
}

model VisitorSession {
  id                    String    @id @default(uuid())
  anonymizedIp          String
  country               String?
  countryCode           String?
  region                String?
  city                  String?
  latitude              Float?
  longitude             Float?
  userAgent             String?
  referrer              String?
  createdAt             DateTime  @default(now())
  
  pageViews             PageView[]
  
  @@index([createdAt])
  @@index([country])
  @@index([countryCode])
}

model PageView {
  id                    String    @id @default(uuid())
  sessionId             String
  path                  String
  duration              Int?      // Duration in seconds
  createdAt             DateTime  @default(now())
  
  session               VisitorSession @relation(fields: [sessionId], references: [id])
  
  @@index([sessionId])
  @@index([path])
  @@index([createdAt])
}
